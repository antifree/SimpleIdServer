// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AuthorizationErrorsFeature : object, Xunit.IClassFixture<AuthorizationErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AuthorizationErrors.feature"
#line hidden
        
        public AuthorizationErrorsFeature(AuthorizationErrorsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AuthorizationErrors", "\tCheck errors returned by the authorization endpoint\t", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Request Uri must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Request Uri must be valid")]
        public void RequestUriMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request Uri must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table11.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
                table11.AddRow(new string[] {
                            "request_uri",
                            "urn:ietf:params:oauth:request_uri:invalid"});
#line 6
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table11, "When ");
#line hidden
#line 11
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then("JSON \'error_description\'=\'the request_uri is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Response Type is required")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Response Type is required")]
        public void ResponseTypeIsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Response Type is required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
#line 19
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table12, "When ");
#line hidden
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("JSON \'error_description\'=\'missing parameter response_type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Response Type must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Response Type must be supported")]
        public void ResponseTypeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Response Type must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table13.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
                table13.AddRow(new string[] {
                            "response_type",
                            "invalid"});
#line 31
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table13, "When ");
#line hidden
#line 36
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then("JSON \'error\'=\'unsupported_response_type\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("JSON \'error_description\'=\'missing response types invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check redirect_uri is valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Check redirect_uri is valid")]
        public void CheckRedirect_UriIsValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check redirect_uri is valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table14.AddRow(new string[] {
                            "response_type",
                            "code"});
                table14.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
                table14.AddRow(new string[] {
                            "state",
                            "state"});
                table14.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table14.AddRow(new string[] {
                            "scope",
                            "openid email role"});
                table14.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8081"});
                table14.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table14.AddRow(new string[] {
                            "display",
                            "popup"});
#line 44
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table14, "When ");
#line hidden
#line 55
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.Then("HTTP status code equals to \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.Then("JSON \'error_description\'=\'redirect_uri http://localhost:8081 is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.Then("JSON \'state\'=\'state\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Scope, resource or authorization_details parameter are required")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Scope, resource or authorization_details parameter are required")]
        public void ScopeResourceOrAuthorization_DetailsParameterAreRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scope, resource or authorization_details parameter are required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table15.AddRow(new string[] {
                            "response_type",
                            "code"});
                table15.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
                table15.AddRow(new string[] {
                            "state",
                            "state"});
                table15.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table15.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8081"});
                table15.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table15.AddRow(new string[] {
                            "display",
                            "popup"});
#line 64
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table15, "When ");
#line hidden
#line 74
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'missing paramet" +
                        "ers scope,resource,authorization_details\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Scope must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Scope must be supported")]
        public void ScopeMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scope must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table16.AddRow(new string[] {
                            "response_type",
                            "code"});
                table16.AddRow(new string[] {
                            "client_id",
                            "fortyClient"});
                table16.AddRow(new string[] {
                            "state",
                            "state"});
                table16.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table16.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table16.AddRow(new string[] {
                            "scope",
                            "scope1"});
                table16.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table16.AddRow(new string[] {
                            "display",
                            "popup"});
#line 79
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table16, "When ");
#line hidden
#line 90
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'scopes scope1 a" +
                        "re not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Nonce is required when id_token is present in the response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Nonce is required when id_token is present in the response_type")]
        public void NonceIsRequiredWhenId_TokenIsPresentInTheResponse_Type()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nonce is required when id_token is present in the response_type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table17.AddRow(new string[] {
                            "response_type",
                            "code id_token"});
                table17.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table17.AddRow(new string[] {
                            "state",
                            "state"});
                table17.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table17.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table17.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table17.AddRow(new string[] {
                            "display",
                            "popup"});
#line 95
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table17, "When ");
#line hidden
#line 105
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'missing paramet" +
                        "er nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Redirect Uri is required")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Redirect Uri is required")]
        public void RedirectUriIsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redirect Uri is required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 109
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table18.AddRow(new string[] {
                            "response_type",
                            "code"});
                table18.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table18.AddRow(new string[] {
                            "state",
                            "state"});
                table18.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table18.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table18.AddRow(new string[] {
                            "display",
                            "popup"});
                table18.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 110
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table18, "When ");
#line hidden
#line 120
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.Then("JSON \'error_description\'=\'missing parameter redirect_uri\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="User must be authenticated when prompt parameter is equals to none")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "User must be authenticated when prompt parameter is equals to none")]
        public void UserMustBeAuthenticatedWhenPromptParameterIsEqualsToNone()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User must be authenticated when prompt parameter is equals to none", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
 testRunner.When("disconnect the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table19.AddRow(new string[] {
                            "response_type",
                            "code"});
                table19.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table19.AddRow(new string[] {
                            "state",
                            "state"});
                table19.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table19.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table19.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table19.AddRow(new string[] {
                            "display",
                            "popup"});
                table19.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table19.AddRow(new string[] {
                            "prompt",
                            "none"});
#line 127
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table19, "When ");
#line hidden
#line 139
 testRunner.Then("redirection url contains the parameter value \'error\'=\'login_required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'login is requir" +
                        "ed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subject in id_token_hint must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Subject in id_token_hint must be valid")]
        public void SubjectInId_Token_HintMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subject in id_token_hint must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 143
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table20.AddRow(new string[] {
                            "sub",
                            "otheruser"});
#line 144
 testRunner.And("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table20, "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table21.AddRow(new string[] {
                            "response_type",
                            "code"});
                table21.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table21.AddRow(new string[] {
                            "state",
                            "state"});
                table21.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table21.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table21.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table21.AddRow(new string[] {
                            "display",
                            "popup"});
                table21.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table21.AddRow(new string[] {
                            "id_token_hint",
                            "$id_token_hint$"});
#line 148
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table21, "When ");
#line hidden
#line 160
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'subject contain" +
                        "ed in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Audience in the id_token_hint must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Audience in the id_token_hint must be valid")]
        public void AudienceInTheId_Token_HintMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Audience in the id_token_hint must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 164
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table22.AddRow(new string[] {
                            "sub",
                            "user"});
                table22.AddRow(new string[] {
                            "aud",
                            "aud1 aud2"});
#line 165
 testRunner.And("build JWS id_token_hint and sign with the key \'keyid\'", ((string)(null)), table22, "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table23.AddRow(new string[] {
                            "response_type",
                            "code"});
                table23.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table23.AddRow(new string[] {
                            "state",
                            "state"});
                table23.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table23.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table23.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table23.AddRow(new string[] {
                            "display",
                            "popup"});
                table23.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table23.AddRow(new string[] {
                            "id_token_hint",
                            "$id_token_hint$"});
#line 170
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table23, "When ");
#line hidden
#line 182
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'audience contai" +
                        "ned in id_token_hint is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Value of a sub essential claim must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "Value of a sub essential claim must be valid")]
        public void ValueOfASubEssentialClaimMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Value of a sub essential claim must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 186
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table24.AddRow(new string[] {
                            "response_type",
                            "code"});
                table24.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table24.AddRow(new string[] {
                            "state",
                            "state"});
                table24.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table24.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table24.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table24.AddRow(new string[] {
                            "display",
                            "popup"});
                table24.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table24.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"sub\": { \"essential\" : true, \"value\": \"invalid\" } } }"});
#line 188
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table24, "When ");
#line hidden
#line 200
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'claims sub are " +
                        "invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must be a valid JWT token")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must be a valid JWT token")]
        public void RequestParameterMustBeAValidJWTToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must be a valid JWT token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 204
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table25.AddRow(new string[] {
                            "response_type",
                            "code"});
                table25.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table25.AddRow(new string[] {
                            "state",
                            "state"});
                table25.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table25.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table25.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table25.AddRow(new string[] {
                            "display",
                            "popup"});
                table25.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table25.AddRow(new string[] {
                            "request",
                            "invalid"});
#line 205
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table25, "When ");
#line hidden
#line 217
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'request paramet" +
                        "er is not a valid JWS token\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains response_type")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains response_type")]
        public void RequestParameterMustContainsResponse_Type()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains response_type", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 221
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table26.AddRow(new string[] {
                            "claim",
                            "value"});
#line 222
 testRunner.And("build JWS request object for client \'thirtyOneClient\' and sign with the key \'keyI" +
                        "d\'", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table27.AddRow(new string[] {
                            "response_type",
                            "code"});
                table27.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table27.AddRow(new string[] {
                            "state",
                            "state"});
                table27.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table27.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table27.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table27.AddRow(new string[] {
                            "display",
                            "popup"});
                table27.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table27.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 226
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table27, "When ");
#line hidden
#line 238
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request_object\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the response_ty" +
                        "pe claim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="request parameter must contains client_id")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "request parameter must contains client_id")]
        public void RequestParameterMustContainsClient_Id()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("request parameter must contains client_id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 242
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table28.AddRow(new string[] {
                            "response_type",
                            "code"});
#line 243
 testRunner.And("build JWS request object for client \'thirtyOneClient\' and sign with the key \'keyI" +
                        "d\'", ((string)(null)), table28, "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table29.AddRow(new string[] {
                            "response_type",
                            "code"});
                table29.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table29.AddRow(new string[] {
                            "state",
                            "state"});
                table29.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table29.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table29.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table29.AddRow(new string[] {
                            "display",
                            "popup"});
                table29.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table29.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 247
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table29, "When ");
#line hidden
#line 259
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request_object\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 260
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the client_id c" +
                        "laim is missing\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the response_type in the request parameter must be equals to the parameter passed" +
            " in the HTTP request")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "the response_type in the request parameter must be equals to the parameter passed" +
            " in the HTTP request")]
        public void TheResponse_TypeInTheRequestParameterMustBeEqualsToTheParameterPassedInTheHTTPRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the response_type in the request parameter must be equals to the parameter passed" +
                    " in the HTTP request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 262
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 263
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table30.AddRow(new string[] {
                            "response_type",
                            "code id_token"});
                table30.AddRow(new string[] {
                            "client_id",
                            "clientId"});
#line 264
 testRunner.And("build JWS request object for client \'thirtyOneClient\' and sign with the key \'keyI" +
                        "d\'", ((string)(null)), table30, "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table31.AddRow(new string[] {
                            "response_type",
                            "code"});
                table31.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table31.AddRow(new string[] {
                            "state",
                            "state"});
                table31.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table31.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table31.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table31.AddRow(new string[] {
                            "display",
                            "popup"});
                table31.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table31.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 269
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table31, "When ");
#line hidden
#line 281
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request_object\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 282
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the response_ty" +
                        "pe claim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the client_id in the request parameter must be equals to the parameter passed in " +
            "the HTTP request")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "the client_id in the request parameter must be equals to the parameter passed in " +
            "the HTTP request")]
        public void TheClient_IdInTheRequestParameterMustBeEqualsToTheParameterPassedInTheHTTPRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the client_id in the request parameter must be equals to the parameter passed in " +
                    "the HTTP request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 284
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 285
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table32.AddRow(new string[] {
                            "response_type",
                            "code"});
                table32.AddRow(new string[] {
                            "client_id",
                            "otherclientId"});
#line 286
 testRunner.And("build JWS request object for client \'thirtyOneClient\' and sign with the key \'keyI" +
                        "d\'", ((string)(null)), table32, "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table33.AddRow(new string[] {
                            "response_type",
                            "code"});
                table33.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table33.AddRow(new string[] {
                            "state",
                            "state"});
                table33.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table33.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table33.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table33.AddRow(new string[] {
                            "display",
                            "popup"});
                table33.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table33.AddRow(new string[] {
                            "request",
                            "$request$"});
#line 291
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table33, "When ");
#line hidden
#line 303
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request_object\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the client_id c" +
                        "laim is invalid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect_uri must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "redirect_uri must be valid")]
        public void Redirect_UriMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect_uri must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 306
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 307
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table34.AddRow(new string[] {
                            "response_type",
                            "code"});
                table34.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table34.AddRow(new string[] {
                            "state",
                            "state"});
                table34.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table34.AddRow(new string[] {
                            "scope",
                            "openid email"});
                table34.AddRow(new string[] {
                            "redirect_uri",
                            "uri"});
                table34.AddRow(new string[] {
                            "display",
                            "popup"});
                table34.AddRow(new string[] {
                            "nonce",
                            "nonce"});
#line 309
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table34, "When ");
#line hidden
#line 320
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 322
 testRunner.Then("JSON \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 323
 testRunner.Then("JSON \'error_description\'=\'redirect_uri uri is not correct\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect to the login page when prompt is equals to login and the user is authent" +
            "icated")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "redirect to the login page when prompt is equals to login and the user is authent" +
            "icated")]
        public void RedirectToTheLoginPageWhenPromptIsEqualsToLoginAndTheUserIsAuthenticated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect to the login page when prompt is equals to login and the user is authent" +
                    "icated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 325
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 326
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table35.AddRow(new string[] {
                            "response_type",
                            "code"});
                table35.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table35.AddRow(new string[] {
                            "state",
                            "state"});
                table35.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table35.AddRow(new string[] {
                            "scope",
                            "openid"});
                table35.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table35.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table35.AddRow(new string[] {
                            "prompt",
                            "login"});
#line 328
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table35, "When ");
#line hidden
#line 339
 testRunner.Then("redirection url contains \'http://localhost/pwd/Authenticate\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect to the account page when prompt is equals to select_account and the user" +
            " is authenticated")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "redirect to the account page when prompt is equals to select_account and the user" +
            " is authenticated")]
        public void RedirectToTheAccountPageWhenPromptIsEqualsToSelect_AccountAndTheUserIsAuthenticated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect to the account page when prompt is equals to select_account and the user" +
                    " is authenticated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 341
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 342
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table36.AddRow(new string[] {
                            "response_type",
                            "code"});
                table36.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table36.AddRow(new string[] {
                            "state",
                            "state"});
                table36.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table36.AddRow(new string[] {
                            "scope",
                            "openid"});
                table36.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table36.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table36.AddRow(new string[] {
                            "prompt",
                            "select_account"});
#line 344
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table36, "When ");
#line hidden
#line 355
 testRunner.Then("redirection url contains \'http://localhost/Accounts\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect to the consent page when no consent has been given to the specified clai" +
            "m")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "redirect to the consent page when no consent has been given to the specified clai" +
            "m")]
        public void RedirectToTheConsentPageWhenNoConsentHasBeenGivenToTheSpecifiedClaim()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect to the consent page when no consent has been given to the specified clai" +
                    "m", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 357
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 358
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table37.AddRow(new string[] {
                            "response_type",
                            "code"});
                table37.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table37.AddRow(new string[] {
                            "state",
                            "state"});
                table37.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table37.AddRow(new string[] {
                            "scope",
                            "openid"});
                table37.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table37.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table37.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"name\": { \"essential\" : true } } }"});
#line 360
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table37, "When ");
#line hidden
#line 371
 testRunner.Then("redirection url contains \'http://localhost/Consents\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="the acr value passed in the claims parameter must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "the acr value passed in the claims parameter must be valid")]
        public void TheAcrValuePassedInTheClaimsParameterMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("the acr value passed in the claims parameter must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 373
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 374
 testRunner.When("disconnect the user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table38.AddRow(new string[] {
                            "response_type",
                            "code"});
                table38.AddRow(new string[] {
                            "client_id",
                            "thirtyOneClient"});
                table38.AddRow(new string[] {
                            "state",
                            "state"});
                table38.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table38.AddRow(new string[] {
                            "scope",
                            "openid"});
                table38.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table38.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table38.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
#line 376
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table38, "And ");
#line hidden
#line 387
 testRunner.Then("redirection url contains the parameter value \'error\'=\'access_denied\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 388
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'no essential ac" +
                        "r is supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="resource parameter is required when the client is excepting to receive this param" +
            "eter")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "resource parameter is required when the client is excepting to receive this param" +
            "eter")]
        public void ResourceParameterIsRequiredWhenTheClientIsExceptingToReceiveThisParameter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("resource parameter is required when the client is excepting to receive this param" +
                    "eter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 390
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 391
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table39.AddRow(new string[] {
                            "response_type",
                            "code"});
                table39.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table39.AddRow(new string[] {
                            "state",
                            "state"});
                table39.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table39.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table39.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table39.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table39.AddRow(new string[] {
                            "scope",
                            "admin"});
#line 393
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table39, "When ");
#line hidden
#line 404
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_target\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 405
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'missing paramet" +
                        "er resource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="resource parameter must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "resource parameter must be valid")]
        public void ResourceParameterMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("resource parameter must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 407
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 408
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table40.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table40.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table40.AddRow(new string[] {
                            "state",
                            "state"});
                table40.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table40.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table40.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table40.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table40.AddRow(new string[] {
                            "resource",
                            "invalid"});
                table40.AddRow(new string[] {
                            "resource",
                            "sinvalid"});
#line 410
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table40, "When ");
#line hidden
#line 422
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_target\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 423
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'following resou" +
                        "rces invalid,sinvalid doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant_management_action parameter must be valid")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "grant_management_action parameter must be valid")]
        public void Grant_Management_ActionParameterMustBeValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant_management_action parameter must be valid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 425
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 426
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table41.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table41.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table41.AddRow(new string[] {
                            "state",
                            "state"});
                table41.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table41.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table41.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table41.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table41.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table41.AddRow(new string[] {
                            "grant_management_action",
                            "invalid"});
#line 428
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table41, "When ");
#line hidden
#line 440
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 441
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the grant_manag" +
                        "ement_action invalid is not valid\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant_id cannot be specified when grant_management_action is equals to create")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "grant_id cannot be specified when grant_management_action is equals to create")]
        public void Grant_IdCannotBeSpecifiedWhenGrant_Management_ActionIsEqualsToCreate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant_id cannot be specified when grant_management_action is equals to create", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 444
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table42.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table42.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table42.AddRow(new string[] {
                            "state",
                            "state"});
                table42.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table42.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table42.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table42.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table42.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table42.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table42.AddRow(new string[] {
                            "grant_id",
                            "id"});
#line 446
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table42, "When ");
#line hidden
#line 459
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 460
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'grant_id cannot" +
                        " be specified because the grant_management_action is equals to create\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant_management_action must be specified when grant_id is present")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "grant_management_action must be specified when grant_id is present")]
        public void Grant_Management_ActionMustBeSpecifiedWhenGrant_IdIsPresent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant_management_action must be specified when grant_id is present", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 463
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 464
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table43.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table43.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table43.AddRow(new string[] {
                            "state",
                            "state"});
                table43.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table43.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table43.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table43.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table43.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table43.AddRow(new string[] {
                            "grant_id",
                            "id"});
#line 466
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table43, "When ");
#line hidden
#line 478
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 479
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'missing paramet" +
                        "er grant_management_action\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant_id must exists")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "grant_id must exists")]
        public void Grant_IdMustExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant_id must exists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 481
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 482
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table44.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table44.AddRow(new string[] {
                            "client_id",
                            "fortySixClient"});
                table44.AddRow(new string[] {
                            "state",
                            "state"});
                table44.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table44.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table44.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table44.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table44.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table44.AddRow(new string[] {
                            "grant_id",
                            "invalid"});
                table44.AddRow(new string[] {
                            "grant_management_action",
                            "replace"});
#line 484
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table44, "When ");
#line hidden
#line 497
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 498
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the grant inval" +
                        "id doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="only the same client can perform operations on the grant")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "only the same client can perform operations on the grant")]
        public void OnlyTheSameClientCanPerformOperationsOnTheGrant()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("only the same client can perform operations on the grant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 500
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 501
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table45.AddRow(new string[] {
                            "response_type",
                            "code"});
                table45.AddRow(new string[] {
                            "client_id",
                            "fortyEightClient"});
                table45.AddRow(new string[] {
                            "state",
                            "state"});
                table45.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table45.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table45.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table45.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table45.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table45.AddRow(new string[] {
                            "grant_management_action",
                            "replace"});
                table45.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
                table45.AddRow(new string[] {
                            "grant_id",
                            "consentId"});
#line 503
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table45, "When ");
#line hidden
#line 517
 testRunner.Then("redirection url contains the parameter value \'error\'=\'access_denied\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 518
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the client fort" +
                        "yEightClient is not authorized to access to perform operations on the grant\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="authorization details type is required")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "authorization details type is required")]
        public void AuthorizationDetailsTypeIsRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("authorization details type is required", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 520
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 521
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table46.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table46.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table46.AddRow(new string[] {
                            "state",
                            "state"});
                table46.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table46.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table46.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table46.AddRow(new string[] {
                            "authorization_details",
                            "{ \"actions\": [ \"write\" ] }"});
#line 523
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table46, "When ");
#line hidden
#line 533
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_authorization_detai" +
                        "ls\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 534
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'the authorizati" +
                        "on_details type is required\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="authorization details types must be supported")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "authorization details types must be supported")]
        public void AuthorizationDetailsTypesMustBeSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("authorization details types must be supported", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 536
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 537
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table47.AddRow(new string[] {
                            "response_type",
                            "code"});
                table47.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table47.AddRow(new string[] {
                            "state",
                            "state"});
                table47.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table47.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table47.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table47.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table47.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table47.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"firstDetails\", \"test\": \"test\", \"creditorAccount\": { \"iban\": \"DE\" } }"});
#line 539
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table47, "When ");
#line hidden
#line 551
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_authorization_detai" +
                        "ls\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 552
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'authorization d" +
                        "etails types firstDetails are not supported\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="redirect to the consent page when no consent has been given to the specified auth" +
            "orization_details")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "redirect to the consent page when no consent has been given to the specified auth" +
            "orization_details")]
        public void RedirectToTheConsentPageWhenNoConsentHasBeenGivenToTheSpecifiedAuthorization_Details()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("redirect to the consent page when no consent has been given to the specified auth" +
                    "orization_details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 554
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 555
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table48.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table48.AddRow(new string[] {
                            "client_id",
                            "fiftyFiveClient"});
                table48.AddRow(new string[] {
                            "state",
                            "state"});
                table48.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table48.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table48.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table48.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"firstDetails\", \"actions\": [ \"write\" ] }"});
#line 557
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table48, "When ");
#line hidden
#line 567
 testRunner.Then("redirection url contains \'http://localhost/Consents\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="credential_configuration_id is required when authorization_details type is equals" +
            " to openid_credential")]
        [Xunit.TraitAttribute("FeatureTitle", "AuthorizationErrors")]
        [Xunit.TraitAttribute("Description", "credential_configuration_id is required when authorization_details type is equals" +
            " to openid_credential")]
        public void Credential_Configuration_IdIsRequiredWhenAuthorization_DetailsTypeIsEqualsToOpenid_Credential()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("credential_configuration_id is required when authorization_details type is equals" +
                    " to openid_credential", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 569
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 570
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table49.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table49.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table49.AddRow(new string[] {
                            "state",
                            "state"});
                table49.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table49.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table49.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table49.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"openid_credential\" }"});
#line 572
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table49, "When ");
#line hidden
#line 582
 testRunner.Then("redirection url contains the parameter value \'error\'=\'invalid_request\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 583
 testRunner.Then("redirection url contains the parameter value \'error_description\'=\'missing paramet" +
                        "er credential_configuration_id\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthorizationErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthorizationErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
