// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CredentialFeature : object, Xunit.IClassFixture<CredentialFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Credential.feature"
#line hidden
        
        public CredentialFeature(CredentialFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Credential", "\tCheck credential endpoint", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="use pre authorized code to get a credential")]
        [Xunit.TraitAttribute("FeatureTitle", "Credential")]
        [Xunit.TraitAttribute("Description", "use pre authorized code to get a credential")]
        public void UsePreAuthorizedCodeToGetACredential()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("use pre authorized code to get a credential", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table138.AddRow(new string[] {
                            "wallet_client_id",
                            "fiftyNineClient"});
                table138.AddRow(new string[] {
                            "credential_template_id",
                            "credTemplate"});
#line 7
 testRunner.When("execute HTTP POST JSON request \'http://localhost/credential_offer/share\'", ((string)(null)), table138, "When ");
#line hidden
#line 12
 testRunner.And("extract query parameters into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And("extract query parameter \'credential_offer\' into JSON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
 testRunner.And("extract parameter \'$.grants.urn:ietf:params:oauth:grant-type:pre-authorized_code." +
                        "pre-authorized_code\' from JSON body into \'preAuthorizedCode\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table139.AddRow(new string[] {
                            "grant_type",
                            "urn:ietf:params:oauth:grant-type:pre-authorized_code"});
                table139.AddRow(new string[] {
                            "client_id",
                            "fiftyNineClient"});
                table139.AddRow(new string[] {
                            "pre-authorized_code",
                            "$preAuthorizedCode$"});
                table139.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"openid_credential\", \"format\": \"jwt_vc_json\", \"types\": [ \"VerifiableCr" +
                                "edential\", \"UniversityDegree\"] }"});
#line 16
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table139, "And ");
#line hidden
#line 23
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("extract parameter \'c_nonce\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table140.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
                table140.AddRow(new string[] {
                            "c_nonce",
                            "$c_nonce$"});
#line 27
 testRunner.And("build proof", ((string)(null)), table140, "And ");
#line hidden
                TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table141.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table141.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table141.AddRow(new string[] {
                            "types",
                            "[\"VerifiableCredential\",\"UniversityDegree\"]"});
                table141.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$proof$\" }"});
#line 32
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/credential\'", ((string)(null)), table141, "And ");
#line hidden
#line 39
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("JSON exists \'credential\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("JSON exists \'c_nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("JSON exists \'c_nonce_expires_in\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("JSON \'format\'=\'jwt_vc_json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="use authorization code to get a credential")]
        [Xunit.TraitAttribute("FeatureTitle", "Credential")]
        [Xunit.TraitAttribute("Description", "use authorization code to get a credential")]
        public void UseAuthorizationCodeToGetACredential()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("use authorization code to get a credential", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table142.AddRow(new string[] {
                            "response_type",
                            "code token"});
                table142.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table142.AddRow(new string[] {
                            "state",
                            "state"});
                table142.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table142.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table142.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table142.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"openid_credential\", \"format\": \"jwt_vc_json\", \"types\": [ \"VerifiableCr" +
                                "edential\", \"UniversityDegree\"] }"});
#line 49
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table142, "When ");
#line hidden
#line 59
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table143.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table143.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table143.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table143.AddRow(new string[] {
                            "code",
                            "$code$"});
                table143.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 61
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table143, "And ");
#line hidden
#line 69
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("extract parameter \'access_token\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("extract parameter \'c_nonce\' from JSON body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.And("extract payload from JWT \'$access_token$\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table144.AddRow(new string[] {
                            "typ",
                            "openid4vci-proof+jwt"});
                table144.AddRow(new string[] {
                            "c_nonce",
                            "$c_nonce$"});
#line 73
 testRunner.And("build proof", ((string)(null)), table144, "And ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table145.AddRow(new string[] {
                            "Authorization",
                            "Bearer $access_token$"});
                table145.AddRow(new string[] {
                            "format",
                            "jwt_vc_json"});
                table145.AddRow(new string[] {
                            "types",
                            "[\"VerifiableCredential\",\"UniversityDegree\"]"});
                table145.AddRow(new string[] {
                            "proof",
                            "{ \"proof_type\": \"jwt\", \"jwt\": \"$proof$\" }"});
#line 78
 testRunner.And("execute HTTP POST JSON request \'https://localhost:8080/credential\'", ((string)(null)), table145, "And ");
#line hidden
#line 85
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.Then("JSON exists \'credential\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.And("JSON exists \'c_nonce\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("JSON exists \'c_nonce_expires_in\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("JSON \'format\'=\'jwt_vc_json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CredentialFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CredentialFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
