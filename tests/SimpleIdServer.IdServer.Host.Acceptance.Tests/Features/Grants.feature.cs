// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.IdServer.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GrantsFeature : object, Xunit.IClassFixture<GrantsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Grants.feature"
#line hidden
        
        public GrantsFeature(GrantsFeature.FixtureData fixtureData, SimpleIdServer_IdServer_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Grants", "\tCheck happy flow implementation : https://bitbucket.org/openid/fapi/src/master/f" +
                    "api-grant-management.md", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant is returned when valid access token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "grant is returned when valid access token is passed")]
        public void GrantIsReturnedWhenValidAccessTokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant is returned when valid access token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table154.AddRow(new string[] {
                            "response_type",
                            "code"});
                table154.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table154.AddRow(new string[] {
                            "state",
                            "state"});
                table154.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table154.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table154.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table154.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table154.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table154.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table154.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
                table154.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"secondDetails\", \"locations\": [ \"https://cal.example.com\" ], \"actions\"" +
                                ": [ \"read\" ] }"});
#line 7
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table154, "When ");
#line hidden
#line 21
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table155.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table155.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table155.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table155.AddRow(new string[] {
                            "code",
                            "$code$"});
                table155.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 23
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table155, "And ");
#line hidden
#line 31
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table156.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 35
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table156, "And ");
#line hidden
#line 39
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("JSON \'$.scopes[2].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.And("JSON \'$.authorization_details[0].type\'=\'secondDetails\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
 testRunner.And("JSON \'$.authorization_details[0].locations[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("JSON \'$.authorization_details[0].actions[0]\'=\'read\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="grant is returned when a valid refreshed access token is passed")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "grant is returned when a valid refreshed access token is passed")]
        public void GrantIsReturnedWhenAValidRefreshedAccessTokenIsPassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("grant is returned when a valid refreshed access token is passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table157.AddRow(new string[] {
                            "response_type",
                            "code"});
                table157.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table157.AddRow(new string[] {
                            "state",
                            "state"});
                table157.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table157.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table157.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table157.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table157.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table157.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table157.AddRow(new string[] {
                            "scope",
                            "grant_management_query offline_access"});
#line 52
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table157, "When ");
#line hidden
#line 65
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table158.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table158.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table158.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table158.AddRow(new string[] {
                            "code",
                            "$code$"});
                table158.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 67
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table158, "And ");
#line hidden
#line 75
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("extract parameter \'$.refresh_token\' from JSON body into \'refreshToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table159.AddRow(new string[] {
                            "grant_type",
                            "refresh_token"});
                table159.AddRow(new string[] {
                            "refresh_token",
                            "$refreshToken$"});
                table159.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table159.AddRow(new string[] {
                            "client_secret",
                            "password"});
#line 78
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table159, "And ");
#line hidden
#line 85
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table160.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 89
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table160, "And ");
#line hidden
#line 93
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="revoke a grant and check access token is revoked")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "revoke a grant and check access token is revoked")]
        public void RevokeAGrantAndCheckAccessTokenIsRevoked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("revoke a grant and check access token is revoked", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table161.AddRow(new string[] {
                            "response_type",
                            "code"});
                table161.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table161.AddRow(new string[] {
                            "state",
                            "state"});
                table161.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table161.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table161.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table161.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table161.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table161.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table161.AddRow(new string[] {
                            "scope",
                            "grant_management_query grant_management_revoke"});
#line 102
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table161, "When ");
#line hidden
#line 115
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table162.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table162.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table162.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table162.AddRow(new string[] {
                            "code",
                            "$code$"});
                table162.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 117
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table162, "And ");
#line hidden
#line 125
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table163.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 129
 testRunner.And("execute HTTP DELETE request \'http://localhost/grants/$grantId$\'", ((string)(null)), table163, "And ");
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table164.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table164.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table164.AddRow(new string[] {
                            "token",
                            "$accessToken$"});
#line 133
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token_info\'", ((string)(null)), table164, "And ");
#line hidden
#line 139
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.Then("HTTP status code equals to \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.And("JSON \'$.active\'=\'false\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="merge the authorization_details types and check the grant is updated")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "merge the authorization_details types and check the grant is updated")]
        public void MergeTheAuthorization_DetailsTypesAndCheckTheGrantIsUpdated()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("merge the authorization_details types and check the grant is updated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table165.AddRow(new string[] {
                            "response_type",
                            "code"});
                table165.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table165.AddRow(new string[] {
                            "state",
                            "state"});
                table165.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table165.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table165.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table165.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"openid_credential\", \"format\": \"jwt_vc_json\", \"types\": [ \"VerifiableCr" +
                                "edential\"], \"locations\" : [ \"http://localhost\" ] }"});
                table165.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table165.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
#line 147
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table165, "When ");
#line hidden
#line 159
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table166.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table166.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table166.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table166.AddRow(new string[] {
                            "code",
                            "$code$"});
                table166.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 161
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table166, "And ");
#line hidden
#line 169
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table167.AddRow(new string[] {
                            "response_type",
                            "code"});
                table167.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table167.AddRow(new string[] {
                            "state",
                            "state"});
                table167.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table167.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table167.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table167.AddRow(new string[] {
                            "grant_management_action",
                            "merge"});
                table167.AddRow(new string[] {
                            "scope",
                            "grant_management_revoke grant_management_query"});
                table167.AddRow(new string[] {
                            "grant_id",
                            "$grantId$"});
                table167.AddRow(new string[] {
                            "authorization_details",
                            "{ \"type\" : \"openid_credential\", \"format\": \"jwt_vc_json\", \"types\": [ \"VerifiableCr" +
                                "edential\", \"UniversityDegreeCredential\"], \"locations\" : [ \"http://localhost\" ] }" +
                                ""});
#line 172
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table167, "And ");
#line hidden
#line 185
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table168.AddRow(new string[] {
                            "client_id",
                            "fiftyEightClient"});
                table168.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table168.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table168.AddRow(new string[] {
                            "code",
                            "$code$"});
                table168.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 187
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table168, "And ");
#line hidden
#line 195
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table169.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 198
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table169, "And ");
#line hidden
#line 202
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.Then("JSON \'$.authorization_details[0].type\'=\'openid_credential\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.And("JSON \'$.authorization_details[0].format\'=\'jwt_vc_json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("JSON \'$.authorization_details[0].locations[0]\'=\'http://localhost\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("JSON \'$.authorization_details[0].types[0]\'=\'VerifiableCredential\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.And("JSON \'$.authorization_details[0].types[1]\'=\'UniversityDegreeCredential\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="merge the permissions consented by the user in the actual request with those alre" +
            "ady exist within the grant")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "merge the permissions consented by the user in the actual request with those alre" +
            "ady exist within the grant")]
        public void MergeThePermissionsConsentedByTheUserInTheActualRequestWithThoseAlreadyExistWithinTheGrant()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("merge the permissions consented by the user in the actual request with those alre" +
                    "ady exist within the grant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 211
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table170.AddRow(new string[] {
                            "response_type",
                            "code"});
                table170.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table170.AddRow(new string[] {
                            "state",
                            "state"});
                table170.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table170.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table170.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table170.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table170.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table170.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table170.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
#line 213
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table170, "When ");
#line hidden
#line 226
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table171.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table171.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table171.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table171.AddRow(new string[] {
                            "code",
                            "$code$"});
                table171.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 228
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table171, "And ");
#line hidden
#line 236
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table172.AddRow(new string[] {
                            "response_type",
                            "code"});
                table172.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table172.AddRow(new string[] {
                            "state",
                            "state"});
                table172.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table172.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table172.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table172.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"iss\": { \"essential\" : false } } }"});
                table172.AddRow(new string[] {
                            "resource",
                            "https://contacts.example.com"});
                table172.AddRow(new string[] {
                            "grant_management_action",
                            "merge"});
                table172.AddRow(new string[] {
                            "scope",
                            "grant_management_revoke grant_management_query"});
                table172.AddRow(new string[] {
                            "grant_id",
                            "$grantId$"});
#line 239
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table172, "And ");
#line hidden
#line 253
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table173.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table173.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table173.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table173.AddRow(new string[] {
                            "code",
                            "$code$"});
                table173.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 255
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table173, "And ");
#line hidden
#line 263
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table174.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 266
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table174, "And ");
#line hidden
#line 270
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
 testRunner.Then("JSON \'$.claims[0]\'=\'acr\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
 testRunner.And("JSON \'$.claims[1]\'=\'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.And("JSON \'$.scopes[0].scope\'=\'admin\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 275
 testRunner.And("JSON \'$.scopes[0].resources[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
 testRunner.And("JSON \'$.scopes[0].resources[1]\'=\'https://contacts.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.And("JSON \'$.scopes[1].scope\'=\'calendar\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.And("JSON \'$.scopes[1].resources[0]\'=\'https://cal.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 279
 testRunner.And("JSON \'$.scopes[1].resources[1]\'=\'https://contacts.example.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
 testRunner.And("JSON \'$.scopes[2].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 281
 testRunner.And("JSON \'$.scopes[3].scope\'=\'grant_management_revoke\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="change the grant to be ONLY the permissions requested by the client and consented" +
            " by the user in the actual request")]
        [Xunit.TraitAttribute("FeatureTitle", "Grants")]
        [Xunit.TraitAttribute("Description", "change the grant to be ONLY the permissions requested by the client and consented" +
            " by the user in the actual request")]
        public void ChangeTheGrantToBeONLYThePermissionsRequestedByTheClientAndConsentedByTheUserInTheActualRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("change the grant to be ONLY the permissions requested by the client and consented" +
                    " by the user in the actual request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 283
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 284
 testRunner.Given("authenticate a user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table175.AddRow(new string[] {
                            "response_type",
                            "code"});
                table175.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table175.AddRow(new string[] {
                            "state",
                            "state"});
                table175.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table175.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table175.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table175.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"acr\": { \"essential\" : true, \"value\": \"urn:openbanking:psd2:ca\" }" +
                                " } }"});
                table175.AddRow(new string[] {
                            "resource",
                            "https://cal.example.com"});
                table175.AddRow(new string[] {
                            "grant_management_action",
                            "create"});
                table175.AddRow(new string[] {
                            "scope",
                            "grant_management_revoke"});
#line 286
 testRunner.When("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table175, "When ");
#line hidden
#line 299
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table176.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table176.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table176.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table176.AddRow(new string[] {
                            "code",
                            "$code$"});
                table176.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 301
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table176, "And ");
#line hidden
#line 309
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
 testRunner.And("extract parameter \'$.grant_id\' from JSON body into \'grantId\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table177.AddRow(new string[] {
                            "response_type",
                            "code"});
                table177.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table177.AddRow(new string[] {
                            "state",
                            "state"});
                table177.AddRow(new string[] {
                            "response_mode",
                            "query"});
                table177.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
                table177.AddRow(new string[] {
                            "nonce",
                            "nonce"});
                table177.AddRow(new string[] {
                            "claims",
                            "{ \"id_token\": { \"iss\": { \"essential\" : false } } }"});
                table177.AddRow(new string[] {
                            "grant_management_action",
                            "replace"});
                table177.AddRow(new string[] {
                            "scope",
                            "grant_management_query"});
                table177.AddRow(new string[] {
                            "grant_id",
                            "$grantId$"});
#line 312
 testRunner.And("execute HTTP GET request \'http://localhost/authorization\'", ((string)(null)), table177, "And ");
#line hidden
#line 325
 testRunner.And("extract parameter \'code\' from redirect url", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table178.AddRow(new string[] {
                            "client_id",
                            "fortySevenClient"});
                table178.AddRow(new string[] {
                            "client_secret",
                            "password"});
                table178.AddRow(new string[] {
                            "grant_type",
                            "authorization_code"});
                table178.AddRow(new string[] {
                            "code",
                            "$code$"});
                table178.AddRow(new string[] {
                            "redirect_uri",
                            "http://localhost:8080"});
#line 327
 testRunner.And("execute HTTP POST request \'https://localhost:8080/token\'", ((string)(null)), table178, "And ");
#line hidden
#line 335
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
 testRunner.And("extract parameter \'$.access_token\' from JSON body into \'accessToken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table179.AddRow(new string[] {
                            "Authorization",
                            "Bearer $accessToken$"});
#line 338
 testRunner.And("execute HTTP GET request \'http://localhost/grants/$grantId$\'", ((string)(null)), table179, "And ");
#line hidden
#line 342
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 344
 testRunner.Then("JSON \'$.claims[0]\'=\'iss\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 345
 testRunner.Then("JSON \'$.scopes[0].scope\'=\'grant_management_query\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GrantsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GrantsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
