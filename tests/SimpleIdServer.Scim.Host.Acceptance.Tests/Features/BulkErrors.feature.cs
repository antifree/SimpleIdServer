// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SimpleIdServer.Scim.Host.Acceptance.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BulkErrorsFeature : object, Xunit.IClassFixture<BulkErrorsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BulkErrors.feature"
#line hidden
        
        public BulkErrorsFeature(BulkErrorsFeature.FixtureData fixtureData, SimpleIdServer_Scim_Host_Acceptance_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BulkErrors", "\tCheck the errors returned by the /Bulk endpoint", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when too many operations are passed")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when too many operations are passed")]
        public void ErrorIsReturnedWhenTooManyOperationsArePassed()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when too many operations are passed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table2.AddRow(new string[] {
                            "schemas",
                            "[ \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\" ]"});
                table2.AddRow(new string[] {
                            "Operations",
                            "[ { \"method\": \"GET\", \"path\": \"/Users/id\", \"bulkId\": \"2\" }, { \"method\": \"GET\", \"pa" +
                                "th\": \"/Users/id\", \"bulkId\": \"2\" }, { \"method\": \"GET\", \"path\": \"/Users/id\", \"bulk" +
                                "Id\": \"2\" }, { \"method\": \"GET\", \"path\": \"/Users/id\", \"bulkId\": \"2\" } ]"});
#line 5
 testRunner.When("execute HTTP POST JSON request \'http://localhost/Bulk\'", ((string)(null)), table2, "When ");
#line hidden
#line 10
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.Then("HTTP status code equals to \'413\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("JSON \'status\'=\'413\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("JSON \'schemas[0]\'=\'urn:ietf:params:scim:api:messages:2.0:Error\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then("JSON \'status\'=\'413\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("JSON \'scimType\'=\'tooLarge\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when bulkId it not well formatted")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when bulkId it not well formatted")]
        public void ErrorIsReturnedWhenBulkIdItNotWellFormatted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when bulkId it not well formatted", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table3.AddRow(new string[] {
                            "schemas",
                            "[ \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\" ]"});
                table3.AddRow(new string[] {
                            "Operations",
                            @"[ { ""method"": ""POST"", ""path"": ""/Users"", ""bulkId"": ""1"", ""data"": { ""schemas"": [ ""urn:ietf:params:scim:schemas:core:2.0:User"", ""urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"" ], ""employeeNumber"": ""number"", ""userName"": ""bjen"", ""name"": { ""formatted"" : ""formatted"", ""familyName"": ""familyName"", ""givenName"": ""givenName"" } } }, { ""method"": ""POST"", ""path"": ""/Groups"", ""bulkId"": ""2"", ""data"": { ""schemas"": [ ""urn:ietf:params:scim:schemas:core:2.0:Group"" ], ""displayName"": ""Tour Guides"", ""members"": [ { ""value"": ""bulkId"" } ] } } ]"});
#line 19
 testRunner.When("execute HTTP POST JSON request \'http://localhost/Bulk\'", ((string)(null)), table3, "When ");
#line hidden
#line 24
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.Then("JSON \'Operations[1].bulkId\'=\'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("JSON \'Operations[1].status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then("JSON \'Operations[1].response.scimType\'=\'invalidSyntax\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.Then("JSON \'Operations[1].response.detail\'=\'bulkId bulkId is not well formatted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Error is returned when bulkId doesn\'t exist")]
        [Xunit.TraitAttribute("FeatureTitle", "BulkErrors")]
        [Xunit.TraitAttribute("Description", "Error is returned when bulkId doesn\'t exist")]
        public void ErrorIsReturnedWhenBulkIdDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error is returned when bulkId doesn\'t exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table4.AddRow(new string[] {
                            "schemas",
                            "[ \"urn:ietf:params:scim:api:messages:2.0:BulkRequest\" ]"});
                table4.AddRow(new string[] {
                            "Operations",
                            @"[ { ""method"": ""POST"", ""path"": ""/Users"", ""bulkId"": ""1"", ""data"": { ""schemas"": [ ""urn:ietf:params:scim:schemas:core:2.0:User"", ""urn:ietf:params:scim:schemas:extension:enterprise:2.0:User"" ], ""employeeNumber"": ""number"", ""userName"": ""bjen"", ""name"": { ""formatted"" : ""formatted"", ""familyName"": ""familyName"", ""givenName"": ""givenName"" } } }, { ""method"": ""POST"", ""path"": ""/Groups"", ""bulkId"": ""2"", ""data"": { ""schemas"": [ ""urn:ietf:params:scim:schemas:core:2.0:Group"" ], ""displayName"": ""Tour Guides"", ""members"": [ { ""value"": ""bulkId:invalid"" } ] } } ]"});
#line 32
 testRunner.When("execute HTTP POST JSON request \'http://localhost/Bulk\'", ((string)(null)), table4, "When ");
#line hidden
#line 37
 testRunner.And("extract JSON from body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.Then("JSON \'Operations[1].bulkId\'=\'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("JSON \'Operations[1].status\'=\'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("JSON \'Operations[1].response.scimType\'=\'invalidSyntax\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then("JSON \'Operations[1].response.detail\'=\'bulkId invalid doesn\'t exist\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BulkErrorsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BulkErrorsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
