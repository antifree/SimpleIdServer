@inject IState<AuthMethodsState> authMethodsState
@inject IDispatcher dispatcher
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using SimpleIdServer.IdServer.Website.Resources;
@using SimpleIdServer.IdServer.Api.AuthenticationMethods
@using SimpleIdServer.IdServer.Website.Stores.AuthMethodsStore;

@if (authMethodsState.Value != null && !authMethodsState.Value.IsLoading)
{
    <RadzenRow>
        @foreach(var authMethod in authMethodsState.Value.AuthenticationMethods.Where(a => a.Name != "otp"))
        {
            var link = GetAuthMethodUrl(authMethod);
            if (!string.IsNullOrWhiteSpace(link))
            {
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLink Path="@link">
                        <RadzenCard Variant="Variant.Filled">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                                <RadzenImage Path="@GetPicture(authMethod)" Style="height: 60px"></RadzenImage>
                                <RadzenText TextStyle="TextStyle.DisplayH6">@authMethod.Name</RadzenText>
                                <div>
                                    @if (authMethod.Capabilities.HasFlag(AuthenticationMethodCapabilities.USERAUTHENTICATION))
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Variant="Variant.Outlined">@Global.Authentication</RadzenBadge>
                                    }

                                    @if (authMethod.Capabilities.HasFlag(AuthenticationMethodCapabilities.PUSHNOTIFICATION))
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Variant="Variant.Outlined">@Global.PushNotification</RadzenBadge>
                                    }
                                </div>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenLink>
                </RadzenColumn>
            }
            else
            {
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenCard Variant="Variant.Filled">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start">
                            <RadzenImage Path="@GetPicture(authMethod)" Style="height: 60px"></RadzenImage>
                            <RadzenText TextStyle="TextStyle.DisplayH6">@authMethod.Name</RadzenText>
                            <div>
                                @if (authMethod.Capabilities.HasFlag(AuthenticationMethodCapabilities.USERAUTHENTICATION))
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Variant="Variant.Outlined">@Global.Authentication</RadzenBadge>
                                }

                                @if (authMethod.Capabilities.HasFlag(AuthenticationMethodCapabilities.PUSHNOTIFICATION))
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Variant="Variant.Outlined">>@Global.PushNotification</RadzenBadge>
                                }
                            </div>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            }
        }
    </RadzenRow>
}

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            var act = new GetAllAuthMethodAction();
            dispatcher.Dispatch(act);
        }
    }

    string GetAuthMethodUrl(AuthenticationMethodResult authMethod)
    {
        if (string.IsNullOrWhiteSpace(authMethod.OptionsName)) return null;
        return "/authentications/authmethods/" + authMethod.Id + "/options";
    }

    string GetPicture(AuthenticationMethodResult authMethod)
    {
        var result = "_content/SimpleIdServer.IdServer.Website/images";
        switch(authMethod.Id)
        {
            case "email":
                return result + "/email.png";
            case "sms":
                return result + "/sms.png";
            case "webauthn":
                return result + "/fido.png";
            case "mobile":
                return result + "/mobile.png";
            case "firebase":
                return result + "/firebase.png";
            case "console":
                return result + "/MachineClient.png";
            case "otp":
                return result + "/OTP.png";
            default:
                return result + "/pwd.png";
        }
    }
}