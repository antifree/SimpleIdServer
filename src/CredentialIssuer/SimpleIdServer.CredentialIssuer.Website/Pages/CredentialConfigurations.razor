@page "/credentialconfs"
@inject IState<CredentialConfigurationsState> credentialConfigurationsState
@inject IDispatcher dispatcher
@inject NotificationService notificationService
@inject ContextMenuService contextMenuService
@inject DialogService dialogService
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using SimpleIdServer.CredentialIssuer.Website.Stores.CredentialIssuer;
@using System.Globalization;

<div class="row">
    <div class="col">
        <RadzenText class="mt-3 mb-3 no-margin" Text="@Global.CredentialConfigurationsTitle" TextStyle="TextStyle.DisplayH3" />
        <p>
            @Global.CredentialConfigurationsDescription
        </p>
    </div>
    <div class="col-3">
        <RadzenButton class="mb-1" Click="@(args => AddCredentialConfiguration())" Icon="add" Text="@Global.AddCredentialConfiguration" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"></RadzenButton>
    </div>
</div>

@if(!credentialConfigurationsState.Value.IsLoading)
{
    <div class="row">
        @foreach(var credentialConfiguration in credentialConfigurationsState.Value.CredentialConfigurations)
        {
            var display = GetDisplay(credentialConfiguration);
            var picture = display?.Logo?.Uri ?? "_content/SimpleIdServer.CredentialIssuer.Website/images/wallet.svg";
            var innerCssStyles = new List<string>();
            if (!string.IsNullOrWhiteSpace(display?.TextColor))
                innerCssStyles.Add($"color:{display.TextColor}");
            if (!string.IsNullOrWhiteSpace(display?.BackgroundColor))
                innerCssStyles.Add($"background-color:{display.BackgroundColor}");
            <div class="col-md-4">
                <RadzenCard Variant="Variant.Filled" Style="@string.Join(';', innerCssStyles)">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Class="rz-p-4">
                        <RadzenImage Path="@picture" Style="Width: 60px" />
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.DisplayH6">@credentialConfiguration.Name</RadzenText>
                            @if (display != null)
                            {
                                <RadzenText TextStyle="TextStyle.Body1">@display.Description</RadzenText>
                            }
                        </RadzenStack>
                    </RadzenStack>
                    <RadzenStack JustifyContent="JustifyContent.End" Orientation="Orientation.Horizontal">
                        <RadzenButton Click=@((evt) => Remove(credentialConfiguration)) Variant="Variant.Text">@Global.Delete</RadzenButton>
                    </RadzenStack>
                </RadzenCard>
            </div>
        }   
    </div>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-m-12" Gap="2rem">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>@Global.Loading</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
}

@code {
    bool selectAll = false;
    RadzenDataGrid<SelectableCredentialConfiguration> credentialConfigurationGrid;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            var act = new GetCredentialConfigurationsAction();
            dispatcher.Dispatch(act);
        }
    }

    void Remove(SelectableCredentialConfiguration credentialConfiguration)
    {
        
    }

    void AddCredentialConfiguration()
    {
        /*
        await dialogService.OpenAsync<AddClientDialog>("Add client", new Dictionary<string, object>(), new DialogOptions
            {
            Width = "700px",
            Height = "512px",
            Resizable = true,
            Draggable = true
    });
    */
    }

    CredentialConfigurationDisplay GetDisplay(SelectableCredentialConfiguration cred)
    {
        if (cred.CredentialConfiguration.Displays == null) return null;
        var display = cred.CredentialConfiguration.Displays.SingleOrDefault(d => d.Locale == CultureInfo.CurrentCulture.Name);
        return display;
    }
}